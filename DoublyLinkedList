class Node():
    def __init__(self, val, prev_Node = None, next_Node = None):
        """
        Initialize your Node here with value val
        """
        self.val = val
        self.prev_Node = prev_Node
        self.next_Node = next_Node

class MyLinkedList(object):
    

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.size = 0
        self.head = None
        self.tail = None

    def get(self, index):
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        :type index: int
        :rtype: int
        """
        if index >= self.size:
            return -1
        
        else:
            i = 0
            return_Node = self.head
            while i < index:
                return_Node = return_Node.next_Node
                i += 1
            return return_Node.val
        

    def addAtHead(self, val):
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        :type val: int
        :rtype: None
        """
        if self.size == 0:
            self.head = Node(val)
            self.tail = self.head
        else:
            self.head.prev_Node = Node(val, None, self.head)
            self.head = self.head.prev_Node
        self.size += 1

    def addAtTail(self, val):
        """
        Append a node of value val to the last element of the linked list.
        :type val: int
        :rtype: None
        """
        if self.size == 0:
            self.tail = Node(val)
            self.head = self.tail
        else: 
            self.tail.next_Node = Node(val, self.tail)
            self.tail = self.tail.next_Node
        self.size += 1
            
        

    def addAtIndex(self, index, val):
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        :type index: int
        :type val: int
        :rtype: None
        """
        if index > self.size:
            return 
        if index == 0:
            self.addAtHead(val)
            return
        if index == self.size:
            self.addAtTail(val)
            return
        i = 0
        temp_Node = self.head
        while i < index:
            temp_Node = temp_Node.next_Node
            i += 1
        new_Node = Node(val, temp_Node.prev_Node, temp_Node)
        temp_Node.prev_Node.next_Node = new_Node
        temp_Node.prev_Node = new_Node
        self.size += 1
            
        

    def deleteAtIndex(self, index):
        """
        Delete the index-th node in the linked list, if the index is valid.
        :type index: int
        :rtype: None
        """
        if index >= self.size:
            return 
        if self.size == 1:
            self.head = None
            self.tail = None
            self.size -=1
            return
        if index == self.size - 1:
            self.tail = self.tail.prev_Node
            self.tail.next_Node = None
            self.size -=1
            return
        if index == 0:
            self.head = self.head.next_Node
            self.head.prev_Node = None
            self.size -=1
            return
        i = 0
        temp_Node = self.head
        while i < index:
            temp_Node = temp_Node.next_Node
            i += 1
        temp_Node.next_Node.prev_Node = temp_Node.prev_Node
        temp_Node.prev_Node.next_Node = temp_Node.next_Node
        self.size -=1
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
